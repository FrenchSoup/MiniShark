package fr.soup.wepbash.attack;

import android.util.Log;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;

import fr.soup.wepbash.attack.exceptions.NoDevicesAvailableException;
import fr.soup.wepbash.attack.exceptions.PcapErrorException;

/**
 * Created by cyprien on 12/07/16.
 */
public abstract class Attacker implements AttackerInterface {

    protected String ssid;
    protected String key;
    protected List<PcapIf> ifs;
    protected PcapIf netInterface;
    protected Pcap pcap;
    protected StringBuilder errbuf;

    static {
        System.loadLibrary("jnetpcap");
    }

    public Attacker(String ssid) {
        this.ssid=ssid;
    }


    public ArrayList<String> detectDevices() throws NoDevicesAvailableException, PcapErrorException {
        //Gain Root
        Process chperm;
        try {
            chperm=Runtime.getRuntime().exec("su");
            DataOutputStream os = new DataOutputStream(chperm.getOutputStream());
            os.writeBytes("groupadd pcap\n");
            os.writeBytes("uid=`dumpsys package fr.soup.wepbash | grep userId= |cut -f 2 -s -d '=' |cut -f 1 -s -d ' '`  \n");
            os.writeBytes("usermod -a -G pcap -u $uid\n");
            os.writeBytes("chgrp pcap /system/lib/libjnetpcap.so\n");
            os.writeBytes("setcap cap_net_raw,cap_net_admin=eip /system/lib/libjnetpcap.so\n");
            os.writeBytes("chmod 777 /system/lib/libjnetpcap.so\n");
            os.flush();
            os.writeBytes("exit\n");
            os.flush();
            chperm.waitFor();
        } catch (IOException e) {
            // TODO Autogenerated catch
            e.printStackTrace();
        } catch (InterruptedException e) {
            // TODO Autogenerated catch
            e.printStackTrace();
        }

        errbuf = new StringBuilder();
        ifs = new ArrayList<>();

        int statusCode=Pcap.findAllDevs(ifs, errbuf);
        if (statusCode != Pcap.OK) {
            Log.wtf("Pcap", "Error occurred: " + errbuf.toString() + " code " + statusCode);
            throw new PcapErrorException(statusCode, errbuf.toString());
        }
        if(ifs.size()==0){
            Log.wtf("Pcap", "No capture devices found");
            throw new NoDevicesAvailableException();
        }

        ArrayList<String> ifs_string=new ArrayList<>();
        for(PcapIf i:ifs){
            ifs_string.add(i.getName());
        }

        return ifs_string;
    }

    @Override
    public void chooseDevice(int dev) throws SocketException {
        netInterface=ifs.get(dev);
        pcap = Pcap.openLive(netInterface.getName(),
                Pcap.DEFAULT_SNAPLEN,
                Pcap.MODE_PROMISCUOUS,
                Pcap.DEFAULT_TIMEOUT,
                errbuf);
    }
}
